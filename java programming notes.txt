package helloWorld;

import java.util.Arrays;
import java.util.InputMismatchException;
import java.util.Scanner;

public class HelloWorld 
{
	public static void main(String[] args) 
	{
		// Variables and operators
		// Variables are names given to data that we need to store and manipulate in our
		// programs.
		// Variable nameing format : data type of the variable, followed
		// by its name.
		
		// int userAge;
		// short numberOfStudents;
		
//		Variable names should be short but meaningful, designed to indicate to the
//		casual reader the intent of its use. It makes more sense to name your variables
//		userName , userAge and userNumber , instead of n , a and un .
		
//		It is common practice to use camel casing when naming variables in Java.
//		Camel casing is the practice of writing compound words with mixed casing,
//		capitalising the first letter of each word except the first word (e.g.
//		thisIsAVariableName ).
		
//		8 primitive types in Java 
//		( byte , short , int , long , float , double , char and boolean 
//		The first 4 data types are for storing integers (i.e. numbers with no fractional
// 		parts
	
//		byte = used for storing integers from -128 to 127
//		
//		short = The short data type uses 2 bytes of storage space and has a range of -32768
//				to 32767.
//		
//		int = The int data type uses 4 bytes of storage space and has a range of -2 31
//				(-2147483648) to 2 31 -1 (2147483647). It is the most commonly used data
//				type for storing integers as it has the most practical range
//			
//		long = The long data type uses 8 bytes of storage space and has a range of -2 63 to
//				2 63 -1. It is rarely used unless you really need to store a very large integer
//				(such as the number of inhabitants on Earth). In order to specify a long value,
//				you have to add the suffix “L” to the end of the number.
//				
//		float = The float data type uses 4 bytes of storage and has a range of approximatelynegative 3.40282347 x 10 38 to positive 3.40282347 x 10 38 . It has a precision
//				of about 7 digits. This means that if you use float to store a number like
//				1.23456789 (10 digits), the number will be rounded off to approximately 7
//				digits (i.e. 1.234568).
		
//		double = The double data type uses 8 bytes of storage and has a range of
//				approximately negative 1.79769313486231570 x 10 308 to positive
//				1.79769313486231570 x 10 308 , with a precision of approximately 15 digits.
//				
//				By default, whenever you specify a floating point number in Java, it is
//				automatically considered to be a double , not a float . If you want Java to
//				treat the floating point number as a float , you have to add a suffix “F” to the
//				end of the number.
//				
//				Unless memory space is a concern, you should always use a double instead
//				of a float as it is more precise.
		
//		char = stands for character and is used to store single Unicode characters such
//				as ‘A’, ‘%’, ‘@’ and ‘p’ etc. It uses 2 bytes of memory.

//		boolean = is a special data type that can only hold two values: true and false .
//				It is commonly used in control flow statements.
				
		// Initializing a variable
		
//		byte userAge = 20;
//		short numberOfStudents = 45;
//		int numberOfEmployees = 500;
//		long numberOfInhabitants = 21021313012678L;
//		
//		float hourlyRate = 60.5F;
//		double numberOfHours = 5120.5;
//		
//		char grade = 'A';
//		boolean promote = true;
//		
//		byte level = 2, userExperience = 5;
//		
//		Add the suffix “L” to the end of the number to specify a long value
	
		// The assignment operator
		
//		In programming, the = sign is known as an assignment
//		operator. It means we are assigning the value on the right side of the = sign to
//		the variable on the left
	
//		x = 3;
//		y = 20;
//		
//		then write
//		y = x;
//		
//		we are assigning the value of x to the variable y . Hence, y becomes 3 while
//		the value of x remains unchanged (i.e. y = 3 , x = 3 now).
		
//		Basic Operators
//		Basic operators in Java include + , - , * , / and % which represent addition,
//		subtraction, multiplication, division and modulus respectively.
		
//		Suppose x = 7, y = 2
//				
//		Addition:
//		x + y = 9
//		
//		Subtraction:
//		x - y = 5
//		
//		Multiplication: x*y = 14
//		
//		Division:
//		x/y = 3 (rounds down the answer to the nearest integer)
//		
//		Modulus:
//		x%y = 1 (gives the remainder when 7 is divided by 2)
//		
//		In Java, division gives an integer answer if both x and y are integers.
//		However, if either x or y is a non integer, we will get a non integer answer.
//		For instance,
//		
//		7 / 2 = 3
//		7.0 / 2 = 3.5
//		7 / 2.0 = 3.5
//		7.0 / 2.0 = 3.5
		
//		In the first case, when an integer is divided by another integer, you get an
//		integer as the answer. The decimal portion of the answer, if any, is truncated.
//		Hence, we get 3 instead of 3.5.
//		
//		In all other cases, the result is a non integer as at least one of the operands is a
//		non integer.
		
//		Type casting in Java
//		If we want to convert a smaller data type into a larger data type, we do not
//		need to do anything explicitly. For instance, the code below assigns a short
//		(2 bytes) to a double (8 bytes). This is known as a widening primitive
//		conversion and does not require any special code on our part.
//		
//		short age = 10;
//		double myDouble = age;
//		
//		However, if we want to assign a larger data type to a smaller data type, we
//		need to indicate it explicitly using a pair of parenthesis. This is known as a
//		narrowing primitive conversion. The example below shows how it can be
//		done.
//		
//		int x = (int) 20.9;
//		
//		Here, we can casting a double (8 bytes) into an int (4 bytes).
//		Narrowing conversion is not safe and should be avoided unless absolutely
//		necessary. This is because narrowing conversion can result in a loss of data.
//		When we cast 20.9 into an int , the resulting value is 20, not 21. The decimal
//		portion is truncated after the conversion.
		
//		We can also cast a double into a float . Recall that we mentioned earlier that
//		all non integers are treated as double by default in Java? If we want to assign
//		a number like 20.9 to a float, we need to add a suffix ‘F’ to the number.
//		Another way to do it is to use a cast, like this:
//		
//		float num1 = (float) 20.9;
//		
//		The value of num1 will be 20.9.
//		
//		In addition to casting between numeric types, we can also do other types of
//		casting.
		
		//Print the words Hello World on the screen		
		System.out.println("Hello world!");
		
		// Arrays and strings
		
		// String methods
		
		// length() method		
		int myLength = "Hello World".length();
		System.out.println(myLength);
		
		// toUpperCase()/toLowerCse() method		
		String uCase = "Hello World".toUpperCase();
		System.out.println(uCase);
		
		String lCase = "Hello World".toLowerCase();
		System.out.println(lCase);
		
		// substring() method		
		String firstSubstring = "Hello World".substring(6);
		System.out.println(firstSubstring);

		String message = "Hello World";
		String secondSubstring = message.substring(1, 8);
		System.out.println(secondSubstring);

		// charAt() method		
		char myChar = "Hello World".charAt(1);
		System.out.println(myChar);
		
		// equals() method
		boolean equalsOrNot = "This is Jamie".equals("This is Jamie");
		boolean equalsOrNot2 = "This is Jamie".equals("Hello World");
		System.out.println(equalsOrNot);
		System.out.println(equalsOrNot2);
		
		// split() method
		String names = "Peter, John, Andy, David";
		String[] splitNames = names.split(", ");
		System.out.println(Arrays.toString(splitNames));
		
		// Arrays
		// Two ways delcaration
		int[] userAge;
		int useAge[];
		
		// Assigning to arrays
		userAge = new int[] {21, 22, 23, 24, 25};
		
		// One array is initialized, size of array cannot be changed anymore
		// Array declaration and initialization can be combine
		//int[] userAge2 = new int[] {21, 22, 23, 24, 25};
		
		// or
		int[] userAge2 = {21, 22, 23, 24,25}; 
		
		// third way to declare and initialize arrays
		int[] userAge3 = new int[5];  // userAge = {0, 0, 0, 0, 0}
		
		// Updating array elements
		userAge[0] = 31; // array becomes {31, 22, 23, 24, 25}
		
		userAge[2] = userAge[2] + 20; // array becomes {32, 22, 43, 24, 25}
		
		// Array methods
		// Array methods are found in java.util.Array class
		// import array methods to use them
		// import java.util.Arrays;
		
		// equals() method
		int[] arr1 = {0, 2, 4, 6, 8, 10};
		int[] arr2 = {0, 2, 4, 6, 8, 10};
		int[] arr3 = {10, 8, 6, 4, 2, 0};
		
		boolean result1 = Arrays.equals(arr1, arr2);
		boolean result2 = Arrays.equals(arr1, arr3);
		System.out.println(result1);
		System.out.println(result2);
		
		// Array methods are static which are called by adding the name of the class in front
		
		// copyOfRange() method
		int[] source = {12, 1, 5, -2, 16, 14, 18, 20, 25};
		int[] dest = Arrays.copyOfRange(source, 3, 7);
		System.out.println(Arrays.toString(dest));
		
		// toString() method
		int[] numbers = {1, 2, 3, 4, 5};
		System.out.println(Arrays.toString(numbers));
		
		// sort() method
		int[] numbers2 = {12, 1, 5, -2, 16, 14};
		Arrays.sort(numbers2);
		// the sort method does not return a new array. It modifies the array that is passed in.
		System.out.println(Arrays.toString(numbers2));
		
		// binarySearch() method
		// allows you to search for a specific value in a sorted way
		int[] myInt = {21, 23, 34, 45, 56, 78, 99};
		int foundIndex = Arrays.binarySearch(myInt, 78);
		System.out.println(foundIndex);
		
		// search not present in the array
		int foundIndex2 = Arrays.binarySearch(myInt, 39);
		System.out.println(foundIndex2);
		
		// -4 indicates that number is not found
		
		// Array length field
		// There is no array length() method
		int[] userAge4 = {21, 22, 26, 32, 40};
		System.out.println(userAge4.length);
		
		// All data types in Java can be classified as either a primitive type or a
//		reference type. There are only 8 primitive types in Java ( byte , short , int ,
//		long , float , double , char and boolean ), the rest are reference types.
//		Examples of reference types include strings and arrays
			
//		An example of a reference type is a String . When you write a statement like
//		String message = "Hello";
//		the variable message actually does not store the string “Hello”.
//		Instead, the string “Hello” is created and stored elsewhere in the computer’s
//		memory. The variable message stores the address of that memory location.

		// Strings are immutable
//		Immutable means the value of a string cannot be changed. Whenever we
//		update a String variable, we are actually creating a new string and assigning
//		the memory address to the String variable.
		
		// Making interactive programs
		//-----------------------------
		
		// Displaying output
		// print() or println() methods
		// use System.out in front to use the methods
		// belong to the PrintStream class
		// println() moves the cursor down to the next line
		
		// Displaying results withould assigning them to variables
		System.out.println(30 + 5);
		
		// Display the result of a method
		System.out.println("Oracle".substring(1, 4));
		
		// User the concatenation sign
		System.out.println("Hello, " + "how are you?" + " I love Java");
		
		int results = 79;
		System.out.println("You scored " + results + " marks for your test.");
		
		// Concatenation mathematical expressinos inside parenthesis
		System.out.println("Ths sume of 50 and 2 is " + (50 + 2) + ".");
		
		// Escape Sequences
		// Special "unprintable" characters like tab or newline
		
		// tab (\t)
		System.out.println("Hello\tWorld");
		
		// newline (\n)
		System.out.println("Hello\nWorld");
		
		// print backslash itself (\\)
		System.out.println("\\");
		
		// print double quotes (\")
		System.out.println("I am 5'9\" tall");
		
		
		// Formatting Outputs
		System.out.println("The answer for 5.45 divided by 3 is " + (5.45/3));
		
		// Use printf to control output
		System.out.printf("The answer of %.2f divided by %d is %.2f.", 5.45, 3, 5.45/3);
		System.out.println();
		
		// Converter
		
		// The integer converter (%d)
		System.out.printf("%d", 12);
		System.out.println();
		
		// conversion error. floating number is not an integer
		// System.out.printf("%d", 12.9);
		
		// conversion error. integer number is not a floating number		
		//System.out.printf("%f", 12)
		
		// The floating converter (%f)
		System.out.printf("%f", 12.9);
		System.out.println();
				
		// The newline converter (%n)
		System.out.printf("%d%n%d",  12, 3);
		System.out.println();
		
		// The width flag (%<number>d of %<number>f)
		System.out.printf("%8d", 12);
		System.out.println();
		
		System.out.printf("%8.2f",  12.4);
		System.out.println();
		
		// The thousands separator flag(,)
		System.out.printf("%,d", 12345);
		System.out.println();

		System.out.printf("%,.2f",  12345.56789);
		System.out.println();
		
		// Accepting User Input
		// Most common way is to use a Scanner object
//		import java.util.Scanner;
		
		// Scanner reader = new Scanner(System.in);
		
//		The Scanner class contains a few methods that we can use to read input from
//		the user. The commonly used methods are nextInt() , nextDouble() and
//		nextLine() for reading int , double and String data types respectively.
		
		inputDemo();
		
		// Control Flow Statements
		
		// Comparison Operators
		// Theprogram proceeds differently depending on the result of the comparison.
		
		// equality operator (==)
		// statement evaluate to True if two values are equal
		
//		Not equal (!=)
//		Returns true if the left is not equal to the right
//		is true
//		6 != 6 is false
//		5 != 2
	//	
//		Greater than (>)
//		Returns true if the left is greater than the right
//		is true
//		3 > 6 is false
//		5 > 2
	//	
//		Smaller than (<)
//		Returns true if the left is smaller than the right
//		is true
//		9 < 6 is false
//		1 < 7
	//	
//		Greater than or equal to (>=)
//		Returns true if the left is greater than or equal to the right
//		is true
//		5 >= 5 is true
//		3 >= 6 is false
//		5 >= 2
	//	
//		Smaller than or equal to (<=)
//		Returns true if the left is smaller than or equal to the right
//		is true
//		7 <= 7 is true
	//	
//		9 <= 6
//		is false
		
//		We also have two logical operators ( && , || ) that are useful if we want to
//		combine multiple conditions.
	//	
//		The AND operator (&&)
//		Returns true if all conditions are met
//		is true
//		5==5 && 2<1 && 3!=7 is false as the second condition ( 2<1 ) is false
//		5==5 && 2>1 && 3!=7
	//	
//		The OR operator (||)
//		Returns true if at least one condition is met.
//		is true as the first condition ( 5==5 ) is true
//		5==6 || 2<1 || 3==7 is false as all conditions are false
		
		// Decision Making Statements
		
		// if statement
		// one of the most commonly used control flow statements.
		
//		It allows the program to evaluate if a certain condition is met and perform the
//		appropriate action based on the result of the evaluation.
//		The structure of an if statement is as follows (line numbers are added for
//		reference):
	//	
//		if (condition 1 is met) 
//		{
//			do Task A
//		}
//		else if (condition 2 is met)
//		{	
//			do Task B
//		}
//		else if (condition 3 is met)
//		{
//			Task C
//		}
//		else
//		{
//			do Task D
//		}
		
		ifDemo();
		
		// Ternary Operator
//		The ternary operator ( ? ) is a simpler form of an if statement that is very
//		convenient if you want to assign a value to a variable depending on the result
//		of a condition. The syntax is:condition ? value to return if condition is true : value to
//		return if condition is false;
//		For instance, the statement
//		
//		3>2 ? 10 : 5;
//		
//		returns the value 10 since 3 is greater than 2 (i.e. the condition 3 > 2 is true).
//		This value can then be assigned to a variable.
//		
//		If we write
//		
//		int myNum = 3>2 ? 10 : 5;
//		
//		myNum will be assigned the value 10.
		
//		Switch Statement
//		The switch statement is similar to an if statement except that it does not
//		work with a range of values. A switch statement requires each case to be
//		based on a single value. Depending on the value of the variable used for
//		switching, the program will execute the correct block of code.
//		The syntax of a switch statement is as follows:
//		
//		switch (variable used for switching)
//		{
//			case firstCase:
//				do A;
//				break;
//			case secondCase:
//				do B;
//				break;
//			default:
//				do C;
//				break;
//		}
		
		switchDemo();
		
		// Looping statements
		
		// For statement
//		The for statement executes a block of code repeatedly until the test condition
//		is no longer valid.
//		The syntax for a for statement is as follows:
		
//		for (initial value; test condition; modification to value)
//		{
//			//Do Some Task
//		}
//		
//		To understand how the for statement works, let’s consider the example
//		below.
		for (int i = 0; i < 5; i++)
		{
			System.out.println(i);
		}
		
		int[] myNumbers = {10, 20, 30, 40, 50};
		
		for (int i = 0; i < myNumbers.length; i++)
		{
			System.out.println(myNumbers[i]);
		}
		
//		Output:
//		10
//		20
//		30
//		40
//		50
		
		// Enhanced For Statement
//		In addition to the for statement, we can also use an enhanced for statement
//		when working with arrays and Collections (we’ll talk about Collections in
//		
//		An enhanced for statement is very useful if you want to get
//		information from an array without making any changes to it.
//		The syntax for an enhanced for statement is:
//		for (variable declaration : name of array)
//		{
//		}
		
		// Suppose you have
		
		int[] myNumbers4 = {10, 20, 30, 40, 50};
		
		// You can use the following code to display the elements of the array.
		
		for (int item : myNumbers4)
			System.out.println(item);
		
//		Output:
//		10
//		20
//		30
//		40
//		50
		
		// While Statement
//		A while statement repeatedly executes instructions inside the loop while a certain
//		condition remains valid. The structure of a while statement is as follows:
//		
//		while (condition is true)
//		{
//			do A
//		}
//		
//		Most of the time when using a while statement, we need to first declare a
//		variable to function as a loop counter. Let’s call this variable counter . The
//		code below shows an example of how a while statement works.
		
		int counter = 5;
		
		while (counter > 0)
		{
			System.out.println("Counter = " + counter);
			counter = counter - 1;
		}
		
//		Output:
//		Counter = 5
//		Counter = 4
//		Counter = 3
//		Counter = 2
//		Counter = 1	
		
		// Do-while statement
		
//		The do-while statement is similar to the while statement with one main
//		difference - the code within the curly braces of a do-while statement is
//		executed at least once. Here’s an example of how a do-while statement
//		works.
		
		int counter1 = 100;
		
		do 
		{
			System.out.println("Counter = " + counter1);
			counter1++;
		} while (counter1<0);
		
//		Output:
//		Counter = 100
		
		
		// Branching Statements
		
		// Break statement
//		In addition to using it in a switch statement, 
//		the break statement can also be used in other control
//		flow statements. It causes the program to exit a loop prematurely when a
//		certain condition is met
		
		for (int i = 0; i < 5; i++)
		{
			System.out.println("i = " + i);
			if (i == 2)
				break;
		}
		
//		Output:
//		i = 0
//		i = 1
//		i = 2
		
		// Continue statement
		// When we use continue , the rest of the loop after the word is skipped for that
		// iteration
		
		for (int i = 0; i<5; i++)
		{
			System.out.println("i = " + i);
			if (i == 2)
				continue;
			System.out.println("I will not be printed if i=2.");
		}
		
//		Output:
//		i = 0
//		I will not be printed if i=2.
//		i = 1
//		I will not be printed if i=2.
//		i = 2
//		i = 3
//		I will not be printed if i=2.
//		i = 4
//		I will not be printed if i=2.
		
		// Exception handling
		// how to control the flow of a program when an error occurs. This is known as exception
		// handling.
		
//		try
//		{
//			do something
//		}
//		catch (type of error)
//		{
//			do something else when an error occurs
//		}
//		finally
//		{
//			do this regardless of whether the try or catch condition is
//		met.
//		}
//		
//		You can have more than one catch blocks. In addition, the finally block is
//		optional
		
		errorDemo();
		
		// Specific Errors
//		Java has other classes that can handle
//		more specific errors. This is useful if you want to perform specific tasks
//		depending on the error caught. For instance, you may want to display your
//		own error messages.
		
		errorDemo2();
		
		// Throwing Exceptions
//		In addition to catching errors under pre-defined conditions, we can also
//		define our own conditions for when an error should occur. This is known as
//		throwing an exception.
//		
//		Suppose for whatever reason, you do not want users to access the first
//		element of the array. You can do that by forcing an exception to be triggered
//		when users enter the number 0.
//		
//		To understand how this works, try running the previous program and enter
//		the value 0. You'll notice that the program runs normally and gives you
//		
//		numbers[0] = 10
//		
//		as the output.
//		
//		Now try adding the statements
//		
//		if (choice == 0)throw new ArrayIndexOutOfBoundsException();
//		
//		after the statement
//		
//		choice = input.nextInt();
//		
//		in the try block above. Run the program again and enter the value 0. You'll
//		notice that the
//		
//		catch(ArrayIndexOutOfBoundsException e)
//		
//		block is executed instead.
//		
//		This is because when users enter the value 0, the condition choice == 0
//		evaluates to true. Hence, the statement
//		
//		throw new ArrayIndexOutOfBoundsException();
//		
//		is executed. This statement causes the
//		
//		catch(ArrayIndexOutOfBoundsException e)
//		
//		block to be executed.
		
		// Object-Oriented Programming
		
//		What is Object-Oriented Programming?
//		Simply stated, object-oriented programming is an approach to programming
//		that breaks a programming problem into objects that interact with each other.
//		
//		Objects are created from templates known as classes. You can think of a class
//		as the blueprint of a building. An object is the actual “building” that we build
//		based on the blueprint.
//		
//		Writing our own class
//		The syntax for declaring a class is as follows:
//		
//		AccessModifier class ClassName {
//		//Contents of the class
//		//including fields, constructors and methods
//		}
//		
//		An example is
//		public class ManagementStaff{
//		}
//		
//		In the example above, we first state the access level of the class using an
//		access modifier. Access modifiers are like gate keepers, they control who has
//		access to that class
		
//		public means the class can be accessed by any class in the program.
//		
//		Package-private, on the other hand, means the class is only accessible to
//		other classes within the same package. There can be more than one packages
//		within a single Java application
		
//		Package-private is the default access level. If we do not
//		write any access modifier, it means the class is package-private.
		
//		After declaring the access level of the class, we type the class keyword to
//		indicate that we are declaring a class, followed by the name of the class
//		( ManagementStaff ).
//		
//		It is common practice to use PascalCasing when naming our classes.
//		PascalCasing refers to the practice of capitalizing the first letter of each word,
//		including the first word (e.g. ThisIsAClassName ).
		
//		public class Staff 
//		{
//			// Fields
//			// format: <access level> <field type> <field name>
//			private String nameOfStaff;
//			private final int hourlyRate = 30;
//			private int hoursWorked;
//			
//			// Methods
//			// format: <access level> <return type> <method name> parenthesis braces 
//			public void printMessage()
//			{
//				System.out.println("Calculating Pay...");
//			}
//			
//			public int calculatepPay()
//			{
//				printMessage();
//				
//				int staffPay;
//				staffPay = hoursWorked * hourlyRate;
//				
//				if (hoursWorked > 0)
//				{
//					return staffPay;
//				}
//				else
//					return -1; // return and exit method
//				
//			}
//
//		}
		
		// There may be cases where a method does not need to return an answer but
		// simply uses the return statement to exit the method.
		
		Staff staff = new Staff();
		Scanner input = new Scanner(System.in);
		
		System.out.print("Enter number of worked hours: ");
		int hoursWorked = input.nextInt();
		int salary = staff.calculatePay(hoursWorked);
		System.out.println(salary);		
	
	}
	
	public static void inputDemo()
	{
		Scanner input = new Scanner(System.in);
		
		System.out.print("Enter an integer: ");
		int myInt = input.nextInt();
		System.out.printf("You entered %d.%n%n", myInt);

		System.out.print("Enter an double: ");
		double myDouble = input.nextDouble();
		System.out.printf("You entered %.2f.%n%n", myDouble);
		
		System.out.print("Enter a string: ");
		input.nextLine();
		String myString = input.nextLine();
		System.out.printf("You entered \"%s\".%n%n", myString);
		
	}
	
	public static void ifDemo()
	{
		Scanner input = new Scanner(System.in);
		System.out.print("\nPlease enter your age: ");
		int userAge = input.nextInt();
		if (userAge < 0 || userAge > 100 )
		{
			System.out.println("Invalid age");
			System.out.println("Age must be between 9 and 100 ");
		}
		else if (userAge < 18)
			System.out.println("Sorry you are underage");
		else if (userAge < 21)
			System.out.println("You need parental consent.");
		else
		{
			System.out.println("Congratulations!");
			System.out.println("You may sign up for the new event!");
		}
		
	}
	
	public static void switchDemo()
	{
		Scanner input = new Scanner(System.in);
		
		System.out.print("Enter your grade: ");
		String userGrade = input.nextLine().toUpperCase();
		
		switch (userGrade)
		{
		case "A+":
			break;
		case "A":
			System.out.println("Distinction");
			break;
		case "B":
			System.out.println("B Grade");
			break;
		case "C":
			System.out.println("C Grade");
			break;
		default:
			System.out.println("Fail");
			break;
		}
	}
	
	public static void errorDemo()
	{
		int num, deno;
		
		Scanner input = new Scanner(System.in);
		
		try
		{
			System.out.println("Please enter the numerator: ");
			num = input.nextInt();
			
			System.out.println("Please enter the denominator: ");
			deno = input.nextInt();
			
			System.out.println("The result is " + num / deno);	
		}
		catch (Exception e)
		{
			System.out.println(e.getMessage());
		}
		finally
		{
			System.out.println("----End of Error Handling Example ----");
		}
		
//		Input: 12 and 4
//		Output:
//		The result is 3
//		---- End of Error Handling Example ----
		
//		Input: 12 and 0
//		Output:
//		/ by zero
//		---End of Error Handling Example ----
		
//		The catch block allows us to specify the type of error that it should catch. In
//		our example, we are trying to catch a general error. Therefore, we write
	//	
//		catch (Exception e)
	//	
//		where Exception refers to the class that the error belongs to and e is the
//		name given to the error.
	//	
//		Exception is a pre-written class in Java. It handles all general errors and has
//		a method called getMessage() that explains the reason for the exception. To
//		display the error message, we write
	//
//		System.out.println(e.getMessage());
	//	
//		In our example, we get the following error message
//		/ by zero
		
	}
	
	public static void errorDemo2()
	{
		int choice = 0;
		
		Scanner input = new Scanner(System.in);
		
		int[] numbers = {10, 11, 12, 13, 14, 15};
		System.out.println("Please enter the index of the array: ");
		
		try
		{
			choice = input.nextInt();
			if (choice == 0)
				throw new ArrayIndexOutOfBoundsException();
			System.out.printf("numbers[%d] = %d%n",  choice, numbers[choice]);
		}
		catch (ArrayIndexOutOfBoundsException e)
		{
			System.out.println("Error: Index is invalid.");
		}
		catch (InputMismatchException e)
		{
			System.out.println("Error: You did not enter an integer.");
		}
		catch (Exception e)
		{
			System.out.println(e.getMessage());
		}
		
//		If you enter
//		10
//		You will get
//		Error: Index is invalid.
//		
//		If you enter
//		Hello
//		You will get
//		Error: You did not enter an integer.
	}
	
//	public class Staff 
//	{
//		private String nameOfStaff;
//		private final int hourlyRate = 30;
//		private int hoursWorked;
//		
//		// Methods
//		// format: <access level> <return type> <method name> parenthesis braces 
//		public void printMessage()
//		{
//			System.out.println("Calculating Pay...");
//		}
//		
//		public int calculatepPay()
//		{
//			printMessage();
//			
//			int staffPay;
//			staffPay = hoursWorked * hourlyRate;
//			
//			if (hoursWorked > 0)
//			{
//				return staffPay;
//			}
//			else
//				return -1;
//		}	
//	}		
	
}

