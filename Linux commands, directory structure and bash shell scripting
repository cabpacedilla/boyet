Learn GNU Linux
================

Learning Linux will create opportunities to program and give commands to the computer how you want the computer to function and land a job with computers even if you did not finish a computer degree. Update your resume and put the links of your shared code in GitHub in the Projects section of your resume.

Linux commands, directory structure, files and bash scripting
--------------------------------------------------------------
Pre-requisite: 

Installation:
Download and install Ubuntu desktop Linux on a virtual machine (Virtualbox) inside Microsoft Windows: https://itsfoss.com/install-linux-in-virtualbox/

Or install Ubuntu on a dedicated SSD hard drive and an 8 GB RAM. Ubuntu need higher hardware specifications for better performance. üôÇ
https://ubuntu.com/tutorials/install-ubuntu-desktop#1-overview

Check first if your desktop or laptop is compatible with Ubuntu from this link: https://certification.ubuntu.com/desktop

Or install Ubuntu alongside with Microsoft Windows. 
Take extra caution when installing Ubuntu alongside Microsoft Windows. 
I do not take any responsibility if the Ubuntu installation will break your pre-installed Microsoft Windows. 
How to install Ubuntu desktop alongside with Microsoft Windows: https://itsfoss.com/install-ubuntu-1404-dual-boot-mode-windows-8-81-uefi/

How to use Linux with Gnome Shell like Ubuntu:
1. Press Super key
2. Start typing name of desired application, file or feature. Application, file or feature will appear before the search box
3. Press Enter key. Application, file or feature will be launched.

How to see the Recent accessed files:
1. Run the Nautilus file manager (named as Files)
2. Click on the Recent menu at top portion in the left pane

How to display all running applications:
- Press Super key. All running applications will be displayed

How to display application grid:
- Press Super key + A

How to display notification pulldown list and calendar:
- Press Super key + V

Linux command line:
--------------------

Steps to run a graphical terminal emulator in Ubuntu Gnome desktop:
1. Press Super key (Windows key)
2. Type terminal
3. Click the terminal icon on the search result
4. The terminal application will run. The terminal app will display a command prompt.

Terminal prompt sample: [claive@ubuntupc claive]$ 

Basic usage of Ubuntu Gnome desktop:
1. Press the Super key (Windows key) 
2. Click an application in the application grid or type the name of an application or the name of a file or folder. The search box can also search files and folders.
3. Click the application, file or folder icon in the search result. The application, file or folder will open.
4. If you need frequent access of the the application, file or folder, add the application to Favorites to the panel bar or add a shorcut of the file or folder to the desktop for faster access of the application, file or folder.

Linux commands:
1. pwd = print working directory

[claive@ubuntupc claive]$ pwd
Output: /home/claive

2. ls = list the content of a directory

[claive@ubuntupc claive]$ ls

Output:
Desktop Documents Music Pictures

3. cd = change directory

[claive@ubuntupc claive]$ cd Documents

Output:
[claive@ubuntupc Documents]$

To navigate to your home directory, use "cd" or "cd ~"

The tilde "~" character means home directory

To navigate up one directory level, use "cd .."

To navigate to the previous directory (or back), use "cd -"

To navigate through multiple levels of directory at once, specify the full directory path that you want to go to. For example, use, "cd /var/www" to go directly to the /www subdirectory of /var/. As another example, "cd ~/Desktop" will move you to the Desktop subdirectory inside your home directory.

4. cp = copy

format: cp sourcefile newfile

[claive@ubuntupc claive]$ cp syllabus.txt syllabusNew.txt

5. command history = keyboard up and down arrow

6. clear = clear the screen

7. rm = remove a file or directory

[claive@ubuntupc claive]$ rm -i syllabus.txt 

-i = option to inquire before removing the file

8. mv = rename a file or directory

Format: mv sourcefile newfilename
[claive@ubuntupc claive]$ mv syllabus.txt linux.txt

9. mkdir = make directory

10. rmdir = remove directory
If folder has files, delete the files first inside the directory with the rm command before removing the directory with the rmdir command

11. cat = concatenate files and print on the standard output

12. grep = print lines that match patterns

13. echo = display a line of text

14. tail = output the last part of files

15. head = output the first part of files

16. uniq = report or omit repeated lines

17. cal = calendar

18. date = date and time

19. exit = process termination

20. who = show is logged on

21. w = show who is logged on and what they are doing

22. whatis = display one-line description

23. which = locate a command

24. file = examine type of file

25. less =  read a file

26. clear = clear screen

Tab = complete command typing or autosuggest commands with the same initial characters of the command from the time the tab key is pressed


Editing files in Linux in terminal
-------------------------------------

Everything in Linux is a file.

1. Install nano editor
2. Type "sudo apt install nano" on the terminal without the double quotes
3. To create a text file type "nano <filename>" or to edit an existing file type "nano <pathoffile>" without the double quotes
4. Start typing
5. Press Ctrl + O to save the file
6. To copy text, highlight the text then press Alt + ^
7. Press Ctrl + K to cut text
8. Press Ctrl + U to paste text

man pages
----------
command format:

man <nameofcommand>

[claive@ubuntupc claive]$ man ls

NAME         
       ls - list directory contents

SYNOPSIS         
       ls [OPTION]... [FILE]...

DESCRIPTION         
       List information about the FILEs (the current directory by
       default).  Sort entries alphabetically if none of -cftuvSUX nor
       --sort is specified.

       Mandatory arguments to long options are mandatory for short
       options too.

       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
              do not list implied . and ..

       --author
              with -l, print the author of each file

       -b, --escape
              print C-style escapes for nongraphic characters

       --block-size=SIZE
              with -l, scale sizes by SIZE when printing them; e.g.,
              '--block-size=M'; see SIZE format below
:

List all files:
[claive@ubuntupc claive]$ ls -a 

List all files in long format (combining options):
[claive@ubuntupc claive]$ ls -al

Search for keywords in man pages
[claive@ubuntupc claive]$ man -k <keyword>

[claive@ubuntupc claive]$ man -k jpeg

Apropos command to search for keyword in the man pages
[claive@ubuntupc claive]$ apropos jpeg


Switching to superuser account (root account) for administrator privileges
-----------------------------------------------------------------------------

su command 

[claive@ubuntupc claive]$ su


Linux directory structure
--------------------------

Changing to root directory
[claive@ubuntupc claive]$ cd /

/ = root directory

/bin = normal system commands like ls, cd, cp etc..

/boot = boot files

/home = users folders

/opt = optional software

/root = root account directory 

/sbin = system administration programs for system administration

/var = contains files to which the system writes data during the course of its operation like log files


Bash shell scripting basics
----------------------------

Steps to create shell script file:

1. Create a new in nano text editor inside a terminal or in graphical text editors like gedit or leafpad.

2. Shell scripts starts with #!<pathofBashprogram>
#!/bin/bash

3. Save shell script file with .sh extension

4. Set shell script file executable with chmod command:
chmod o+x scriptname.sh

CONCEPTS:
---------
1. VARIABLES and OPERATORS
2. IF THEN ELSE TEST CONDITION
3. LOOPS AND ITERATION

Example 1: Displaying output and comments

Filename: displayOutput.sh

#!/bin/bash

# This is a comment

echo "This is a script."
echo "What do you think?" # this is a comment

Save the file then run the script in terminal with command: bash displayOutput.sh or ./displayOutput.sh

Output:
This is a script
What do you think?

1. VARIABLES AND OPERATORS: 
----------------------------
Local variables
---------------
variable = container to hold data or information
variable name

Examples:
string1
num1
total

Value of variable format is $<variablename> = $string1, $num1,  

* Enclose variables in double quotes "$variablename" will display the value of the variable

Example:
#!/bin/bash

testing="moby dick"
 
echo "here is what $testing looks like in double quotes."

Save and run script in terminal.

Output:
here is what moby dick looks like in double quotes


* Enclose variables in single quotes ( '$variablename' ) = string = output = variablename

Example: 
#!/bin/bash

testing="moby dick" 

echo 'here is what $testing looks like in single quotes.'

Save and run script in terminal.

Output:
here is what $testing looks like in single quotes

* Backslash before variables ( \$variablename üôÅ display variable as string

Example: 
#!/bin/bash

name3=\$testing

echo "This is what the variable $name3 is equal to: $name3."

Save and run script in terminal.

Output:
This is what the variable name3 is equal to: $testing

* Enclose command in back ticks = take value of command
assign value of commands to variables

Example:
#!/bin/bash

space_used=`du -s /home/john | cut -f 1`
echo "John is using $space_used kilobytes"

Save and run script in terminal.

Output:
John is using 3247 kilobytes.


OPERATORS:
-------------
Assignment operator ('=')
--------------------------
variablename=value

Note: There should be no spaces beside the assignment operators, string and number operators in an expession.

Example 2: Variables, variable assignment and displaying variable output

Filename: variablesOutput.sh

#!/bin/bash

testing="moby dick" 

echo "here is what $testing looks like in double quotes."
echo 'here is what $testing looks like in single quotes.'

name2='$testing'

echo "This is what the variable $name2 is equal to: $name2."

name3=\$testing

echo "This is what the variable $name3 is equal to: $name3."


space_used=`du -s /home/john | cut -f 1`
echo "John is using $space_used kilobytes"

Save the file then run the script in terminal: ./variablesOutput.sh

Output:
here is what moby dick looks like in double quotes
here is what $testing looks like in single quotes
This is what the variable name2 is equal to: $testing
This is what the variable name3 is equal to: $testing
John is using 7836 kilobytes


Math operators:
---------------
  +, -, , /, % (modulo), * (exponent)
  
Comparison operators for string:
--------------------------------
  =, !=, -n, -z       # -n = non-zero characters in string -z = zero characters in string

Comparison operators for numbers:
--------------------------------
  -gt, -ge, -lt, -le, -ne, eq
    
File operators
-----------------
  -r, -x, -w, -d, -f, -s
    
    
3. IF THEN ELSE TEST CONDITION
-------------------------------    
Example 1: String

Filename: stringCompare.sh

#!/bin/bash

string1="tommy"
string2="chucky"

if [ $string1 != $string2 ]
then
  echo "string1 is not equal to string2"
else
  echo "string1 is equal to string2"
fi

if [ -n $string1 ]  # -n = zero length characters
then
  echo "string1 is not empty string"
else
  echo "string1 is the empty string"
fi

Save the file then run the script in terminal: ./stringCompare.sh

Output:
string1 is not equal to string2
string1 is not empty string

Example 2: Numbers

Filename: numberCompare.sh

#!/bin/bash

num1=10
num2=15
num3=20

if [ $num1 -ge $num2 ]
then  
  echo "$num1 is greater than or equal to $num2"
else
  echo "$num1 is less than $num2"
fi

let num4=$num1+$num2

if [ $num4 -gt $num3 ]
then
  echo "$num4 is greater than $num3"
else
  echo "$num4 is less than or equal to $num3"
fi

Save the file then run the script in terminal: ./numberCompare.sh

Output:
10 is less than 15
25 is greater than 20

Example 3: Files

Filename: fileCheck.sh

#!/bin/bash

dir1=/home/perry
file1=/home/perry/scripts/fileCheck.sh

if [ -x $file1 ] # if executable
then
  echo "$file1 is executable"
else
  echo  "$file1 is not executable"
fi

if [ -d $file ] # if a directory
then
  echo "$file1 is a directory"
else
  echo "$file1 is not a directory"
fi


if [ -r $dir1 -a -x $dir1 ] # if readable and executable
then
  echo "$dir1 is readable and executable"
else
  echo "$dir1 is not both readable and executable"
fi

Save the file then run the script in terminal: ./fileCheck.sh

Output:
/home/John/scripts/fileCheck.sh is executable
/home/John/scripts/fileCheck.sh is not a directory

External variables
-------------------
External variables (argument (data) passed to script): 
Example: 
$ scriptname.sh argument1 argument2 argument3

Value of external variables = $1 (first argument), $2 (2nd argument), ..
$# = number of arguments passed to script
$0 = script itself

Enclose external variables with curly braces for output ${1} or ${2}

Example 4: Disk usage system check

Filename: diskUsage.sh

#!/bin/bash

if [ $# -lt 1 ]
then
   echo "You must pass at least one username to the $0 script"
   exit
fi

cd /home/$1
SPACE=`du -s | cut -f 1`

echo "${1} is using $SPACE kilobytes."

Save then run the script in terminal with username argument: ./diskUsage.sh John

Output:
John is using 4324 kilobytes


4. LOOPS AND ITERATION
-----------------------
While loop:
-----------
Example 1: Disk usage system check for multiple users

Filename: diskUsageAll.sh

#!/bin/bash

if [ $# -lt 1 ]
then
   echo "You must pass at least one username to the $0 script"
   exit
fi

while [ $# -ge 1 ]
do  
  cd /home/$1
  SPACE=`du -s | cut -f 1`

  echo "${1} is using $SPACE kilobytes"
  shift
done

Save the file then run the script in terminal with usernames arguments: diskusage.sh john paul ringo

Output:
John is using 2342 kilobytes.
Paul is using 7868 kilobytes.
Ringo is using 768 kilobytes.

For loop:
---------
Example 2: Check password file for new system users

Filename: newUsersCheck.sh

#!/bin/bash

passwordFile=/etc/passwd
userCount=0
specialCount=0

# extract user id's (field 3) from password file
userIDs=`cat $passwordFile | cut -f 3 -d :`

# check user id in turn and if is between 500 and 1000 then increment userCount else increment specialCount
for id in $userIDs
do
  if [ $id -ge 500 -a $id -le 1000 ]
  then
    let userCount=userCount+1
  else
    let specialCount=specialCount+1
  fi
done

echo "There are $userCount normal users on the system and $specialCount special users on the system"

Save the file then run the script in terminal: ./newUsersCheck.sh

Output:
There are 34 normal users on the system and 23 special users on the system.


Linux Maintenance
------------------

BACKUPS
--------
1. Full backup
2. Incremenal backup
3. Differential backup

Full back with tar to removable media
------------------------------------
long format:
tar --create --verbose --same-permissions --file /mnt/zip/talrball1 /home /etc/
ls -l /mnt/zip

short format:
tar cvpf /mnt/zip/tarball1 /home /etc

--diff --compare


Tar incremental backup
----------------
tar cvpf /mnt/zip/tarball2 --newer 20May02 /home /etc


Backup scripts in linux-backup-net


Restoring files
----------------
tar archive does not start with root directory ('/')
tar xvpf /mnt/zip/tarball1 home/perry/linux-syllabus.txt


list contents of a tar archive
-------------------------------
tar tvpf /mnt/zip/tarball1 | more

UI tool = Amanda


MONITORING RAM, SWAP AND DISKS
------------------------------

Monitoring RAM
---------------
free command

Memory total, used and free column information
swap partition information

-b, -k, -m options = display in bytes, kilobytes or in megabytes
-t = display in total
-v = display version

free -s option # continuosly run the free command

# Example: Run free in five minutes and redirect output to a text file
free -s 5 > free_output.txt


Monitoring processes
---------------------
top command


Creating swapfile
------------------
dd if=/dev/swapfile bs=1024 count=1024
mkswap /swapfile
swapon /swapfile
check swapfile with free command


add swapfile entry in /etc/fstab to always enable swapfile on boo


df command = report file system disk space usage


Deleting unused files
---------------------

Core files or core dumps (unused files)
----------------------------------------
Don't delete core files recklessly 

Check the ownership of the core file or check 

check which program created a core file or core dump (unused file)
user gdb command
gdb -c <nameofcorefile>

cron
command: more crontab

put scripts in the /ect/cron.hourly, .daily, .weekly, .monthly
set time designation of cron job
hourly time means script will in every number of minutes

To learn more about creating dedicated programs, pick a programming language like C, Python or Javascript and create programs.
